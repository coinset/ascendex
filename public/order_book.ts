import { BASE_URL } from "./constants.ts";
import { jsonFetch, Reviver, SuccessResponse } from "./_utils.ts";
import { TickerData } from "./ticker.ts";
import { isString } from "../deps.ts";

export type OrderBookOptions = {
  /** Valid symbol supported by exchange */
  symbol: `${string}/${string}`;
};

export type OrderBookResponse = SuccessResponse<{
  m: "depth-snapshot";

  /** e.g. `"ASD/USDT"` */
  symbol: `${string}/${string}`;

  /** actual bid and ask info. See below for detail. */
  data: {
    /** a sequence number that is guaranteed to increase for each symbol. */
    seqnum: number;

    /** UTC timestamp in milliseconds when the message is generated by the server */
    ts: number;

    /** pair of price and size of ask levels */
    asks: [number, number][];

    /** pair of price and size of bid levels */
    bids: [number, number][];
  };
}>;

const reviver: Reviver = (key, value) => {
  if (["asks", "bids"].includes(key) && Array.isArray(value)) {
    return value.map((v) =>
      Array.isArray(v) ? v.map((_v) => isString(_v) ? Number(_v) : _v) : v
    );
  }

  return value;
};

/** Returns a list of order book.
 * ```ts
 * import { fetchOrderBook } from "https://deno.land/x/ascendex@$VERSION/mod.ts"
 * await fetchOrderBook({symbol: "BTC/USDT" })
 * ```
 * @see https://ascendex.github.io/ascendex-pro-api/#order-book-depth
 */
export function fetchOrderBook(
  { symbol }: OrderBookOptions,
  init?: RequestInit,
): Promise<OrderBookResponse> {
  const url = new URL("depth", BASE_URL);

  url.searchParams.set("symbol", symbol);

  return jsonFetch(url, init, {
    parseJson: reviver,
  });
}

export type { TickerData };
